/* The following code was generated by JFlex 1.4.3 on 6/13/14 2:49 AM */

package com.intellij.lang.yang.lexer;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.lang.yang.psi.YangTypes.*;
import static com.intellij.lang.yang.psi.YangTokenTypeSets.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/13/14 2:49 AM from the specification file
 * <tt>/Users/dave/dev/yang/src/main/java/com/intellij/lang/yang/lexer/_YangLexer.flex</tt>
 */
public class _YangLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VALUE_MODE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\16\1\0\1\13"+
    "\4\0\1\15\2\0\1\5\1\23\1\0\1\41\1\21\1\4\12\6"+
    "\1\22\1\17\5\0\6\6\24\21\1\0\1\10\1\0\1\14\1\47"+
    "\1\0\1\25\1\36\1\43\1\45\1\35\1\12\1\34\1\44\1\42"+
    "\1\21\1\51\1\32\1\31\1\26\1\40\1\46\1\53\1\33\1\37"+
    "\1\11\1\7\1\50\1\54\1\30\1\27\1\52\1\20\1\0\1\24"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\4\1\5\1\6\1\7"+
    "\1\10\22\4\4\2\1\11\1\12\2\0\56\4\1\0"+
    "\1\1\1\0\1\1\2\0\2\3\2\0\30\4\1\13"+
    "\6\4\1\14\24\4\1\15\1\4\6\0\1\3\2\4"+
    "\1\16\1\17\11\4\1\20\4\4\1\21\1\4\1\22"+
    "\6\4\1\23\2\4\1\24\13\4\1\25\7\4\1\26"+
    "\4\4\1\27\2\0\1\30\21\4\1\31\17\4\1\32"+
    "\14\4\1\33\2\0\1\34\4\4\1\35\7\4\1\36"+
    "\2\4\1\37\1\4\1\40\7\4\1\41\1\42\4\4"+
    "\1\43\3\4\1\44\1\45\4\4\1\46\2\4\2\0"+
    "\1\47\1\4\1\50\1\51\25\4\1\52\2\4\1\53"+
    "\1\54\1\4\1\55\1\4\1\56\3\4\1\57\11\4"+
    "\1\60\1\4\1\61\10\4\1\62\3\4\1\63\1\64"+
    "\1\4\1\65\3\4\1\66\2\4\1\67\1\70\2\4"+
    "\1\71\3\4\1\72\3\4\1\73\1\4\1\74\12\4"+
    "\1\75\1\4\1\76\1\77\4\4\1\100\7\4\1\101"+
    "\1\4\1\102\1\103\1\104\1\105\4\4\1\106\1\4"+
    "\1\107\1\4\1\110\1\111\2\4\1\112\1\4\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\132\0\132\0\132\0\132\0\u0195\0\u01c2\0\u01ef"+
    "\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357"+
    "\0\u0384\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf"+
    "\0\u04ec\0\u0519\0\u0546\0\132\0\132\0\u0573\0\u05a0\0\u05cd"+
    "\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735"+
    "\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\132\0\u0f1e\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0"+
    "\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248"+
    "\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\341"+
    "\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\341\0\u14be"+
    "\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626"+
    "\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e"+
    "\0\u17bb\0\u17e8\0\u1815\0\341\0\u1842\0\u04ec\0\u186f\0\u0519"+
    "\0\u0546\0\u189c\0\u18c9\0\u0f1e\0\u18f6\0\u1923\0\341\0\u1950"+
    "\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8"+
    "\0\u1ae5\0\341\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3"+
    "\0\341\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\341"+
    "\0\u1d2e\0\u1d5b\0\341\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c"+
    "\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\341\0\u1f77"+
    "\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\341\0\u20b2"+
    "\0\u20df\0\u210c\0\u2139\0\341\0\u2166\0\u2193\0\341\0\u21c0"+
    "\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328"+
    "\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490"+
    "\0\341\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb"+
    "\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733"+
    "\0\341\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e"+
    "\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\341\0\u297c\0\u29a9"+
    "\0\341\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\341\0\u2a8a\0\u2ab7"+
    "\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\341\0\u2bc5\0\u2bf2"+
    "\0\341\0\u2c1f\0\341\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00"+
    "\0\u2d2d\0\u2d5a\0\341\0\341\0\u2d87\0\u2db4\0\u2de1\0\u2e0e"+
    "\0\341\0\u2e3b\0\u2e68\0\u2e95\0\341\0\341\0\u2ec2\0\u2eef"+
    "\0\u2f1c\0\u2f49\0\341\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd\0\341"+
    "\0\u302a\0\341\0\341\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b"+
    "\0\u3138\0\u3165\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273"+
    "\0\u32a0\0\u32cd\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db"+
    "\0\341\0\u3408\0\u3435\0\341\0\341\0\u3462\0\341\0\u348f"+
    "\0\341\0\u34bc\0\u34e9\0\u3516\0\341\0\u3543\0\u3570\0\u359d"+
    "\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705"+
    "\0\341\0\u3732\0\u375f\0\u378c\0\u37b9\0\u37e6\0\u3813\0\u3840"+
    "\0\u386d\0\341\0\u389a\0\u38c7\0\u38f4\0\341\0\341\0\u3921"+
    "\0\341\0\u394e\0\u397b\0\u39a8\0\341\0\u39d5\0\u3a02\0\341"+
    "\0\341\0\u3a2f\0\u3a5c\0\341\0\u3a89\0\u3ab6\0\u3ae3\0\341"+
    "\0\u3b10\0\u3b3d\0\u3b6a\0\341\0\u3b97\0\341\0\u3bc4\0\u3bf1"+
    "\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff\0\u3d2c\0\u3d59"+
    "\0\341\0\u3d86\0\341\0\341\0\u3db3\0\u3de0\0\u3e0d\0\u3e3a"+
    "\0\341\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u3f75"+
    "\0\341\0\u3fa2\0\341\0\341\0\341\0\341\0\u3fcf\0\u3ffc"+
    "\0\u4029\0\u4056\0\341\0\u4083\0\341\0\u40b0\0\341\0\341"+
    "\0\u40dd\0\u410a\0\341\0\u4137\0\341";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\3\1\6\1\7\1\3\1\10"+
    "\1\11\3\3\1\4\1\12\1\13\1\6\1\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\6\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\6\1\31\1\32"+
    "\1\6\1\33\1\34\1\6\1\35\1\36\2\6\1\37"+
    "\1\3\3\4\1\40\6\3\1\41\1\42\1\43\1\4"+
    "\1\44\1\45\34\3\56\0\3\4\12\0\1\4\42\0"+
    "\1\46\1\47\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\30\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\30\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\6\1\50\10\6\1\51\15\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\2\6\1\52\25\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\6\6\1\53"+
    "\1\6\1\54\17\6\6\0\1\6\1\55\1\0\2\6"+
    "\6\0\2\6\2\0\1\6\1\56\4\6\1\57\21\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\1\60"+
    "\12\6\1\61\14\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\62\14\6\1\63\12\6\6\0\1\6"+
    "\1\64\1\0\2\6\6\0\2\6\2\0\1\65\12\6"+
    "\1\66\1\6\1\67\12\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\70\4\6\1\71\12\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\1\72"+
    "\7\6\1\73\10\6\1\74\6\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\6\6\1\75\21\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\6\1\76"+
    "\1\6\1\77\2\6\1\100\21\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\101\7\6\1\102\4\6"+
    "\1\103\12\6\6\0\1\6\1\104\1\0\1\105\1\6"+
    "\6\0\2\6\2\0\30\6\6\0\1\6\1\106\1\0"+
    "\2\6\6\0\2\6\2\0\6\6\1\107\21\6\6\0"+
    "\2\6\1\0\1\6\1\110\6\0\2\6\2\0\1\6"+
    "\1\111\2\6\1\112\13\6\1\113\7\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\1\114\12\6\1\115"+
    "\3\6\1\116\10\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\10\6\1\117\17\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\120\5\6\1\121\4\6"+
    "\1\122\14\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\123\27\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\10\6\1\124\17\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\17\6\1\125\10\6\4\0"+
    "\1\46\1\47\57\0\1\126\2\0\1\127\1\130\41\0"+
    "\2\131\13\0\3\131\44\0\1\132\3\0\1\133\1\127"+
    "\37\0\1\46\1\134\1\135\52\46\5\136\1\137\47\136"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\15\6"+
    "\1\140\12\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\141\17\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\21\6\1\142\6\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\1\143\27\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\144\27\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\7\6"+
    "\1\145\20\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\2\6\1\146\25\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\7\6\1\147\20\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\4\6\1\150\23\6"+
    "\6\0\2\6\1\0\1\151\1\6\6\0\2\6\2\0"+
    "\30\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\6\1\152\26\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\6\1\153\26\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\12\6\1\154\15\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\6\1\155"+
    "\1\6\1\156\24\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\20\6\1\157\7\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\6\1\160\26\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\161\1\162"+
    "\26\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\12\6\1\163\15\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\6\1\164\26\6\6\0\2\6\1\0"+
    "\1\6\1\165\6\0\2\6\2\0\23\6\1\166\2\6"+
    "\1\167\1\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\16\6\1\170\11\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\13\6\1\171\14\6\6\0\1\6"+
    "\1\172\1\0\2\6\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\1\173\1\6\6\0\2\6\2\0\30\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\6\6"+
    "\1\174\21\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\12\6\1\175\15\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\5\6\1\176\22\6\6\0\2\6"+
    "\1\0\1\177\1\6\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\11\6\1\200"+
    "\16\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\201\27\6\6\0\2\6\1\0\1\202\1\6\6\0"+
    "\2\6\2\0\30\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\7\6\1\203\10\6\1\204\7\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\14\6\1\205"+
    "\13\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\16\6\1\206\2\6\1\207\6\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\21\6\1\210\6\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\10\6\1\211"+
    "\17\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\12\6\1\212\15\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\6\1\213\26\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\13\6\1\214\14\6\6\0"+
    "\2\6\1\0\1\6\1\215\6\0\2\6\2\0\12\6"+
    "\1\216\10\6\1\217\4\6\6\0\2\6\1\0\1\220"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\10\6\1\221\17\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\12\6\1\222"+
    "\15\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\5\6\1\223\22\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\2\6\1\224\25\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\10\6\1\225\17\6\4\0"+
    "\1\226\2\0\1\227\4\226\12\0\1\226\4\0\1\226"+
    "\2\0\1\226\31\0\1\226\1\230\1\231\52\0\1\226"+
    "\42\0\2\131\10\0\1\226\1\230\1\231\3\131\40\0"+
    "\1\231\2\0\1\232\4\231\12\0\1\231\4\0\1\231"+
    "\2\0\1\231\33\0\1\231\41\0\1\135\52\0\5\136"+
    "\1\233\53\136\1\234\1\233\47\136\6\0\2\6\1\0"+
    "\1\235\1\6\6\0\2\6\2\0\26\6\1\236\1\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\12\6"+
    "\1\237\15\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\240\17\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\16\6\1\241\11\6\6\0\2\6"+
    "\1\0\1\242\1\6\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\4\6\1\243"+
    "\23\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\3\6\1\244\24\6\6\0\1\6\1\245\1\0\2\6"+
    "\6\0\2\6\2\0\30\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\246\17\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\15\6\1\247\12\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\7\6"+
    "\1\250\20\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\14\6\1\251\13\6\6\0\2\6\1\0\1\252"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\20\6\1\253\7\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\14\6\1\254"+
    "\13\6\6\0\1\6\1\255\1\0\2\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\14\6\1\256\13\6\6\0\2\6\1\0\1\6"+
    "\1\257\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\7\6\1\260\20\6\6\0"+
    "\2\6\1\0\1\261\1\6\6\0\2\6\2\0\30\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\7\6"+
    "\1\262\20\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\263\4\6\1\264\12\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\15\6\1\265\12\6"+
    "\6\0\1\6\1\266\1\0\2\6\6\0\2\6\2\0"+
    "\30\6\6\0\1\6\1\267\1\0\2\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\4\6\1\270\23\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\271\17\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\13\6\1\272\14\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\273\17\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\13\6\1\274\14\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\4\6\1\275\23\6\6\0\2\6"+
    "\1\0\1\276\1\6\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\21\6\1\277"+
    "\6\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\300\27\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\301\17\6\6\0\2\6\1\0\1\6"+
    "\1\302\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\5\6\1\303\22\6\6\0"+
    "\1\6\1\304\1\0\2\6\6\0\2\6\2\0\30\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\13\6"+
    "\1\305\14\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\6\1\306\26\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\307\17\6\6\0\2\6"+
    "\1\0\1\310\1\311\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\15\6\1\312"+
    "\12\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\313\27\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\16\6\1\314\11\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\15\6\1\315\12\6\6\0\2\6"+
    "\1\0\1\316\1\6\6\0\2\6\2\0\17\6\1\317"+
    "\10\6\6\0\2\6\1\0\1\6\1\320\6\0\2\6"+
    "\2\0\12\6\1\321\15\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\15\6\1\322\12\6\6\0\1\6"+
    "\1\323\1\0\2\6\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\6\1\324"+
    "\26\6\6\0\1\325\3\0\1\325\12\0\1\325\7\0"+
    "\2\325\4\0\1\325\1\0\1\325\15\0\1\326\3\0"+
    "\1\326\12\0\1\326\7\0\2\326\4\0\1\326\1\0"+
    "\1\326\7\0\4\136\1\135\1\233\47\136\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\12\6\1\327\15\6"+
    "\6\0\1\6\1\330\1\0\2\6\6\0\2\6\2\0"+
    "\30\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\20\6\1\331\7\6\6\0\2\6\1\0\1\332\1\6"+
    "\6\0\2\6\2\0\30\6\6\0\1\6\1\333\1\0"+
    "\2\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\10\6\1\334\17\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\4\6\1\335"+
    "\23\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\4\6\1\336\23\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\12\6\1\337\15\6\6\0\2\6\1\0"+
    "\1\6\1\340\6\0\2\6\2\0\30\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\14\6\1\341\13\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\342\17\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\343\27\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\10\6\1\344\17\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\5\6\1\345\22\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\10\6\1\346"+
    "\17\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\14\6\1\347\13\6\6\0\2\6\1\0\1\350\1\6"+
    "\6\0\2\6\2\0\30\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\351\17\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\6\6\1\352\21\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\1\6"+
    "\1\353\26\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\12\6\1\354\15\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\15\6\1\355\12\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\21\6\1\356\6\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\1\6"+
    "\1\357\26\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\6\6\1\360\21\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\1\6\1\361\26\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\13\6\1\362\14\6"+
    "\6\0\1\6\1\363\1\0\2\6\6\0\2\6\2\0"+
    "\30\6\6\0\1\6\1\364\1\0\2\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\6\1\365\26\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\6\6\1\366\21\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\10\6\1\367\17\6"+
    "\6\0\1\6\1\370\1\0\2\6\6\0\2\6\2\0"+
    "\30\6\6\0\2\6\1\0\1\371\1\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\6\6\1\372\21\6\6\0\2\6\1\0\1\373"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\374\27\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\15\6\1\375\12\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\16\6"+
    "\1\376\11\6\6\0\1\6\1\377\1\0\2\6\6\0"+
    "\2\6\2\0\30\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\6\6\1\u0100\21\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\u0101\27\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\10\6\1\u0102\17\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\15\6"+
    "\1\u0103\12\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\u0104\17\6\6\0\2\6\1\0\1\u0105"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\10\6\1\u0106\17\6\6\0"+
    "\1\u0107\3\0\1\u0107\12\0\1\u0107\7\0\2\u0107\4\0"+
    "\1\u0107\1\0\1\u0107\15\0\1\u0108\3\0\1\u0108\12\0"+
    "\1\u0108\7\0\2\u0108\4\0\1\u0108\1\0\1\u0108\15\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\10\6\1\u0109"+
    "\17\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\10\6\1\u010a\17\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\15\6\1\u010b\12\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\6\6\1\u010c\21\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\6\1\u010d"+
    "\26\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\5\6\1\u010e\22\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\10\6\1\u010f\17\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\21\6\1\u0110\6\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\15\6\1\u0111"+
    "\12\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\23\6\1\u0112\4\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\5\6\1\u0113\22\6\6\0\2\6\1\0"+
    "\1\u0114\1\6\6\0\2\6\2\0\30\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\5\6\1\u0115\22\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\u0116\17\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\5\6\1\u0117\22\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\5\6\1\u0118\22\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\17\6\1\u0119\10\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\u011a\17\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\u011b\17\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\15\6\1\u011c\12\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\6\6\1\u011d\21\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\15\6"+
    "\1\u011e\12\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\12\6\1\u011f\15\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\14\6\1\u0120\13\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\7\6\1\u0121\20\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\20\6"+
    "\1\u0122\7\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\12\6\1\u0123\15\6\6\0\2\6\1\0\1\u0124"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\15\6\1\u0125\12\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\10\6\1\u0126"+
    "\17\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\u0127\27\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\20\6\1\u0128\7\6\6\0\2\6\1\0\1\u0129"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\15\6\1\u012a\12\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\15\6\1\u012b"+
    "\1\u012c\11\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\7\6\1\u012d\20\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\u012e\17\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\5\6\1\u012f\22\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\15\6"+
    "\1\u0130\12\6\6\0\2\6\1\0\1\u0131\1\6\6\0"+
    "\2\6\2\0\30\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\6\6\1\u0132\21\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\3\6\1\u0133\24\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\6\1\u0134"+
    "\26\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\15\6\1\u0135\12\6\6\0\1\u0136\3\0\1\u0136\12\0"+
    "\1\u0136\7\0\2\u0136\4\0\1\u0136\1\0\1\u0136\15\0"+
    "\1\u0137\3\0\1\u0137\12\0\1\u0137\7\0\2\u0137\4\0"+
    "\1\u0137\1\0\1\u0137\15\0\2\6\1\0\1\6\1\u0138"+
    "\6\0\2\6\2\0\30\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\13\6\1\u0139\14\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\10\6\1\u013a\17\6"+
    "\6\0\2\6\1\0\1\u013b\1\6\6\0\2\6\2\0"+
    "\30\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\6\1\u013c\26\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\u013d\27\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\16\6\1\u013e\11\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\10\6\1\u013f\17\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\u0140\17\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\13\6\1\u0141\14\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\u0142\17\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\10\6\1\u0143\17\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\15\6"+
    "\1\u0144\12\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\6\1\u0145\26\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\13\6\1\u0146\14\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\10\6\1\u0147\17\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\1\6"+
    "\1\u0148\26\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\15\6\1\u0149\12\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\1\u014a\3\6\1\u014b\23\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\12\6\1\u014c"+
    "\15\6\6\0\1\6\1\u014d\1\0\2\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\25\6\1\u014e\2\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\20\6\1\u014f\7\6\6\0\2\6"+
    "\1\0\1\u0150\1\6\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\10\6\1\u0151"+
    "\17\6\6\0\2\6\1\0\1\u0152\1\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\6\1\u0153\26\6\6\0\2\6\1\0\1\u0154"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\1\u0155\1\6\6\0\2\6\2\0\30\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\21\6\1\u0156\6\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\u0157\4\6\1\u0158\12\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\1\6\1\u0159\26\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\16\6\1\u015a\11\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\13\6"+
    "\1\u015b\14\6\6\0\1\226\3\0\1\226\12\0\1\226"+
    "\7\0\2\226\4\0\1\226\1\0\1\226\15\0\1\231"+
    "\3\0\1\231\12\0\1\231\7\0\2\231\4\0\1\231"+
    "\1\0\1\231\15\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\6\1\u015c\26\6\6\0\2\6\1\0\1\u015d"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\16\6\1\u015e\11\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\u015f\27\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\6\6"+
    "\1\u0160\21\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\4\6\1\u0161\23\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\6\6\1\u0162\21\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\4\6\1\u0163\23\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\4\6"+
    "\1\u0164\23\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\12\6\1\u0165\15\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\16\6\1\u0166\11\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\1\6\1\u0167\26\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\14\6"+
    "\1\u0168\13\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\7\6\1\u0169\20\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\13\6\1\u016a\14\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\21\6\1\u016b\6\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\u016c\17\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\14\6\1\u016d\13\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\5\6\1\u016e\22\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\1\u016f\27\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\14\6\1\u0170"+
    "\13\6\6\0\1\6\1\u0171\1\0\2\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\2\6\1\u0172\25\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\u0173\17\6\6\0\2\6"+
    "\1\0\1\u0174\1\6\6\0\2\6\2\0\30\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\13\6\1\u0175"+
    "\14\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\10\6\1\u0176\17\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\6\1\u0177\26\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\14\6\1\u0178\13\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\10\6\1\u0179"+
    "\17\6\6\0\2\6\1\0\1\u017a\1\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\12\6\1\u017b\15\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\10\6\1\u017c\17\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\2\6\1\u017d\25\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\u017e\17\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\u017f\17\6\6\0\2\6\1\0\1\u0180"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\10\6\1\u0181\17\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\14\6\1\u0182"+
    "\13\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\15\6\1\u0183\12\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\6\1\u0184\26\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\21\6\1\u0185\6\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\12\6\1\u0186"+
    "\15\6\6\0\2\6\1\0\1\u0187\1\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\u0188\17\6\6\0\2\6\1\0\1\u0189"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\11\6\1\u018a\16\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\6\6\1\u018b"+
    "\21\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\6\6\1\u018c\21\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\15\6\1\u018d\12\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\6\1\u018e\26\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\20\6\1\u018f"+
    "\7\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\15\6\1\u0190\12\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\15\6\1\u0191\12\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\6\1\u0192\26\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\1\6\1\u0193"+
    "\26\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\6\1\u0194\26\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\20\6\1\u0195\7\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\6\1\u0196\26\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\22\6\1\u0197"+
    "\5\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\12\6\1\u0198\15\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\13\6\1\u0199\14\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\15\6\1\u019a\12\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\2\6\1\u019b"+
    "\25\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\10\6\1\u019c\17\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\13\6\1\u019d\14\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\15\6\1\u019e\12\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\13\6\1\u019f"+
    "\14\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\13\6\1\u01a0\14\6\6\0\2\6\1\0\1\u01a1\1\6"+
    "\6\0\2\6\2\0\30\6\6\0\2\6\1\0\1\u01a2"+
    "\1\6\6\0\2\6\2\0\30\6\6\0\2\6\1\0"+
    "\1\u01a3\1\6\6\0\2\6\2\0\30\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\1\u01a4\27\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\12\6\1\u01a5"+
    "\15\6\6\0\2\6\1\0\1\u01a6\1\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\u01a7\27\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\13\6\1\u01a8\14\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\1\6\1\u01a9\26\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\7\6\1\u01aa"+
    "\20\6\6\0\2\6\1\0\2\6\6\0\2\6\2\0"+
    "\1\6\1\u01ab\26\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\6\1\u01ac\26\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\12\6\1\u01ad\15\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\12\6\1\u01ae"+
    "\15\6\6\0\2\6\1\0\1\u01af\1\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\1\u01b0\1\6\6\0"+
    "\2\6\2\0\30\6\6\0\2\6\1\0\2\6\6\0"+
    "\2\6\2\0\1\u01b1\27\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\7\6\1\u01b2\20\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\1\6\1\u01b3\26\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\15\6"+
    "\1\u01b4\12\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\10\6\1\u01b5\17\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\1\u01b6\27\6\6\0\2\6\1\0"+
    "\2\6\6\0\2\6\2\0\7\6\1\u01b7\20\6\6\0"+
    "\2\6\1\0\2\6\6\0\2\6\2\0\10\6\1\u01b8"+
    "\17\6\6\0\2\6\1\0\1\u01b9\1\6\6\0\2\6"+
    "\2\0\30\6\6\0\2\6\1\0\2\6\6\0\2\6"+
    "\2\0\1\6\1\u01ba\26\6\6\0\2\6\1\0\2\6"+
    "\6\0\2\6\2\0\12\6\1\u01bb\15\6\6\0\2\6"+
    "\1\0\2\6\6\0\2\6\2\0\16\6\1\u01bc\11\6"+
    "\6\0\2\6\1\0\2\6\6\0\2\6\2\0\10\6"+
    "\1\u01bd\17\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\6\1\4\11\26\1\2\11\2\0"+
    "\56\1\1\0\1\1\1\0\1\1\2\0\1\1\1\11"+
    "\2\0\66\1\6\0\71\1\2\0\60\1\2\0\55\1"+
    "\2\0\206\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[445];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _YangLexer() {
    this((java.io.Reader)null);
  }


  public _YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _YangLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yybegin(YYINITIAL); return YANG_SEMICOLON;
          }
        case 76: break;
        case 74: 
          { yybegin(VALUE_MODE); return YANG_FRACTION_DIGITS_KEYWORD;
          }
        case 77: break;
        case 13: 
          { yybegin(VALUE_MODE); return YANG_KEY_KEYWORD;
          }
        case 78: break;
        case 43: 
          { yybegin(VALUE_MODE); return YANG_CONTACT_KEYWORD;
          }
        case 79: break;
        case 19: 
          { yybegin(VALUE_MODE); return YANG_ENUM_KEYWORD;
          }
        case 80: break;
        case 10: 
          { yybegin(YYINITIAL); return YANG_LEFT_BRACE;
          }
        case 81: break;
        case 27: 
          { yybegin(VALUE_MODE); return YANG_VALUE_KEYWORD;
          }
        case 82: break;
        case 29: 
          { yybegin(VALUE_MODE); return YANG_ANYXML_KEYWORD;
          }
        case 83: break;
        case 21: 
          { yybegin(VALUE_MODE); return YANG_CASE_KEYWORD;
          }
        case 84: break;
        case 41: 
          { yybegin(VALUE_MODE); return YANG_AUGMENT_KEYWORD;
          }
        case 85: break;
        case 75: 
          { yybegin(VALUE_MODE); return YANG_REQUIRE_INSTANCE_KEYWORD;
          }
        case 86: break;
        case 65: 
          { yybegin(VALUE_MODE); return YANG_DESCRIPTION_KEYWORD;
          }
        case 87: break;
        case 62: 
          { yybegin(VALUE_MODE); return YANG_ORDERED_BY_KEYWORD;
          }
        case 88: break;
        case 61: 
          { yybegin(VALUE_MODE); return YANG_BELONGS_TO_KEYWORD;
          }
        case 89: break;
        case 72: 
          { yybegin(VALUE_MODE); return YANG_ERROR_APP_TAG_KEYWORD;
          }
        case 90: break;
        case 17: 
          { yybegin(VALUE_MODE); return YANG_LEAF_KEYWORD;
          }
        case 91: break;
        case 33: 
          { yybegin(VALUE_MODE); return YANG_STATUS_KEYWORD;
          }
        case 92: break;
        case 70: 
          { yybegin(VALUE_MODE); return YANG_ORGANIZATION_KEYWORD;
          }
        case 93: break;
        case 23: 
          { yybegin(VALUE_MODE); return YANG_WHEN_KEYWORD;
          }
        case 94: break;
        case 48: 
          { yybegin(VALUE_MODE); return YANG_REVISION_KEYWORD;
          }
        case 95: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 96: break;
        case 57: 
          { yybegin(VALUE_MODE); return YANG_EXTENSION_KEYWORD;
          }
        case 97: break;
        case 6: 
          { return YANG_LEFT_BRACE;
          }
        case 98: break;
        case 38: 
          { yybegin(VALUE_MODE); return YANG_PREFIX_KEYWORD;
          }
        case 99: break;
        case 1: 
          { return YANG_STRING_LITERAL;
          }
        case 100: break;
        case 31: 
          { yybegin(VALUE_MODE); return YANG_LENGTH_KEYWORD;
          }
        case 101: break;
        case 11: 
          { yybegin(VALUE_MODE); return YANG_RPC_KEYWORD;
          }
        case 102: break;
        case 71: 
          { yybegin(VALUE_MODE); return YANG_REVISION_DATE_KEYWORD;
          }
        case 103: break;
        case 64: 
          { yybegin(VALUE_MODE); return YANG_YIN_ELEMENT_KEYWORD;
          }
        case 104: break;
        case 47: 
          { yybegin(VALUE_MODE); return YANG_ARGUMENT_KEYWORD;
          }
        case 105: break;
        case 69: 
          { yybegin(VALUE_MODE); return YANG_MIN_ELEMENTS_KEYWORD;
          }
        case 106: break;
        case 34: 
          { yybegin(VALUE_MODE); return YANG_OUTPUT_KEYWORD;
          }
        case 107: break;
        case 58: 
          { yybegin(VALUE_MODE); return YANG_SUBMODULE_KEYWORD;
          }
        case 108: break;
        case 8: 
          { return YANG_RIGHT_BRACE;
          }
        case 109: break;
        case 28: 
          { yybegin(VALUE_MODE); return YANG_UNIQUE_KEYWORD;
          }
        case 110: break;
        case 50: 
          { yybegin(VALUE_MODE); return YANG_IDENTITY_KEYWORD;
          }
        case 111: break;
        case 42: 
          { yybegin(VALUE_MODE); return YANG_INCLUDE_KEYWORD;
          }
        case 112: break;
        case 60: 
          { yybegin(VALUE_MODE); return YANG_DEVIATION_KEYWORD;
          }
        case 113: break;
        case 22: 
          { yybegin(VALUE_MODE); return YANG_PATH_KEYWORD;
          }
        case 114: break;
        case 7: 
          { return YANG_PLUS;
          }
        case 115: break;
        case 46: 
          { yybegin(VALUE_MODE); return YANG_PATTERN_KEYWORD;
          }
        case 116: break;
        case 59: 
          { yybegin(VALUE_MODE); return YANG_CONTAINER_KEYWORD;
          }
        case 117: break;
        case 67: 
          { yybegin(VALUE_MODE); return YANG_YANG_VERSION_KEYWORD;
          }
        case 118: break;
        case 63: 
          { yybegin(VALUE_MODE); return YANG_IF_FEATURE_KEYWORD;
          }
        case 119: break;
        case 40: 
          { yybegin(VALUE_MODE); return YANG_FEATURE_KEYWORD;
          }
        case 120: break;
        case 32: 
          { yybegin(VALUE_MODE); return YANG_REFINE_KEYWORD;
          }
        case 121: break;
        case 30: 
          { yybegin(VALUE_MODE); return YANG_MODULE_KEYWORD;
          }
        case 122: break;
        case 54: 
          { yybegin(VALUE_MODE); return YANG_MANDATORY_KEYWORD;
          }
        case 123: break;
        case 5: 
          { return YANG_SEMICOLON;
          }
        case 124: break;
        case 15: 
          { yybegin(VALUE_MODE); return YANG_TYPE_KEYWORD;
          }
        case 125: break;
        case 35: 
          { yybegin(VALUE_MODE); return YANG_IMPORT_KEYWORD;
          }
        case 126: break;
        case 45: 
          { yybegin(VALUE_MODE); return YANG_DEVIATE_KEYWORD;
          }
        case 127: break;
        case 18: 
          { yybegin(VALUE_MODE); return YANG_LIST_KEYWORD;
          }
        case 128: break;
        case 26: 
          { yybegin(VALUE_MODE); return YANG_INPUT_KEYWORD;
          }
        case 129: break;
        case 56: 
          { yybegin(VALUE_MODE); return YANG_REFERENCE_KEYWORD;
          }
        case 130: break;
        case 20: 
          { yybegin(VALUE_MODE); return YANG_BASE_KEYWORD;
          }
        case 131: break;
        case 55: 
          { yybegin(VALUE_MODE); return YANG_LEAF_LIST_KEYWORD;
          }
        case 132: break;
        case 25: 
          { yybegin(VALUE_MODE); return YANG_RANGE_KEYWORD;
          }
        case 133: break;
        case 14: 
          { yybegin(VALUE_MODE); return YANG_USES_KEYWORD;
          }
        case 134: break;
        case 49: 
          { yybegin(VALUE_MODE); return YANG_GROUPING_KEYWORD;
          }
        case 135: break;
        case 52: 
          { yybegin(VALUE_MODE); return YANG_POSITION_KEYWORD;
          }
        case 136: break;
        case 12: 
          { yybegin(VALUE_MODE); return YANG_BIT_KEYWORD;
          }
        case 137: break;
        case 44: 
          { yybegin(VALUE_MODE); return YANG_DEFAULT_KEYWORD;
          }
        case 138: break;
        case 53: 
          { yybegin(VALUE_MODE); return YANG_NAMESPACE_KEYWORD;
          }
        case 139: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 140: break;
        case 37: 
          { yybegin(VALUE_MODE); return YANG_CHOICE_KEYWORD;
          }
        case 141: break;
        case 68: 
          { yybegin(VALUE_MODE); return YANG_MAX_ELEMENTS_KEYWORD;
          }
        case 142: break;
        case 4: 
          { yybegin(VALUE_MODE); return YANG_IDENTIFIER;
          }
        case 143: break;
        case 73: 
          { yybegin(VALUE_MODE); return YANG_ERROR_MESSAGE_KEYWORD;
          }
        case 144: break;
        case 51: 
          { yybegin(VALUE_MODE); return YANG_PRESENCE_KEYWORD;
          }
        case 145: break;
        case 16: 
          { yybegin(VALUE_MODE); return YANG_MUST_KEYWORD;
          }
        case 146: break;
        case 24: 
          { yybegin(VALUE_MODE); return YANG_UNITS_KEYWORD;
          }
        case 147: break;
        case 36: 
          { yybegin(VALUE_MODE); return YANG_CONFIG_KEYWORD;
          }
        case 148: break;
        case 39: 
          { yybegin(VALUE_MODE); return YANG_TYPEDEF_KEYWORD;
          }
        case 149: break;
        case 66: 
          { yybegin(VALUE_MODE); return YANG_NOTIFICATION_KEYWORD;
          }
        case 150: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
